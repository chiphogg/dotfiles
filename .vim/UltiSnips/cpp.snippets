snippet if "C-style if-block" !b
if (${1}) {
  ${2:${VISUAL}}
}
endsnippet

snippet eif "C-style else if block" !
else if (${1}) {
  ${2}
}
endsnippet

snippet el "C-style else block" !
else {
  ${1}
}
endsnippet

# Example:
#   std::cout << "Value of x is v<<
# After expansion, becomes:
#   std::cout << "Value of x is '" << _1_ << "'_2_
# where _1_ is the cursor position, and _2_ is the next jump position.
snippet "\b(\w+)\<\<" "output a variable to a stream" r
${1:`!p snip.rv=match.group(1)`}: '" << ${2:`!p snip.rv=match.group(1)`} << "'
endsnippet

snippet "\\n" "<< std::endl" r
 << std::endl
endsnippet

snippet "(\W)\<\<" "Description" r
`!p snip.rv=match.group(1)`'" << $1 << "'
endsnippet

snippet mp "std::make_pair" w
`!p snip.rv=ns_x_unless_using_x('std', 'make_pair')`(${1:${VISUAL}}, $2)
endsnippet

snippet p "std::pair" w
`!p snip.rv=ns_x_unless_using_x('std', 'pair')`<${1:${VISUAL}}, $2>
endsnippet

snippet ns "ATC-style namespace" b
namespace`!p snip.rv = ' ' if t[1] else ''`$1
{
$0
} // namespace`!p snip.rv = ' ' if t[1] else ''`$1
endsnippet

snippet once_legacy "Include guard" b
#ifndef ${1:`!p snip.rv = '_'.join(re.split(r'[./]', path.upper())) `}
#define $1

${0:${VISUAL}}

#endif // $1
endsnippet

snippet once "`#pragma once` include guard" b
#pragma once
endsnippet

global !p
def appears_in_file(x):
  """Does any line in this file match x?

  Args:
    x:  The string to search for.

  Returns:
    A boolean indicating whether x is found.
  """
  for line in vim.current.window.buffer:
    if line == x:
      return True
  return False

def ns_x_unless_using_x(ns, x):
  """'ns::x', unless 'using ns::x;' appears in the file.

  Args:
    x:  Some identifier.
  """
  full_name = '{}::{}'.format(ns, x)
  return x if appears_in_file('using {};'.format(full_name)) else full_name
endglobal

snippet sp "std::shared_ptr<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'shared_ptr')`<${1:${VISUAL}}>
endsnippet

snippet ms "std::make_shared<T>()" w
`!p snip.rv=ns_x_unless_using_x('std', 'make_shared')`<${1:${VISUAL}}>($2)
endsnippet

snippet wp "std::weak_ptr<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'weak_ptr')`<${1:${VISUAL}}>
endsnippet

snippet up "std::unique_ptr<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'unique_ptr')`<${1:${VISUAL}}>
endsnippet

snippet mu "std::make_unique<T>()" w
`!p snip.rv=ns_x_unless_using_x('std', 'make_unique')`<${1:${VISUAL}}>($2)
endsnippet

snippet o "std::optional<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'optional')`<${1:${VISUAL}}>
endsnippet

snippet mo "std::make_optional<T>()" w
`!p snip.rv=ns_x_unless_using_x('std', 'make_optional')`<${1:${VISUAL}}>($2)
endsnippet

snippet v "std::vector<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'vector')`${1:<${2:${VISUAL}}>}
endsnippet

snippet m "std::map<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'map')`<${1:${VISUAL}}>
endsnippet

snippet um "std::unordered_map<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'unordered_map')`<${1:${VISUAL}}>
endsnippet

snippet s "std::string<T>" w
`!p snip.rv=ns_x_unless_using_x('std', 'string')`
endsnippet

snippet ev2 "Eigen::Vector2" w
`!p snip.rv=ns_x_unless_using_x('Eigen', 'Vector2')`${1:<${2:${VISUAL}}>}
endsnippet
